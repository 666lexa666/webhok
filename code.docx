const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { NewMessage } = require('telegram/events');
const axios = require('axios');
const input = require('input');
require('dotenv').config(); // —á–∏—Ç–∞–µ–º .env –∏–∑ —Ç–æ–π –∂–µ –ø–∞–ø–∫–∏

const apiId = 9899010;
const apiHash = '9498cec89c19cd317c32e23411e23016';
const stringSession = new StringSession('');

const { FORWARD_URL, FORWARD_USERNAME, FORWARD_PASSWORD, BOT_USERNAME } = process.env;

(async () => {
    console.log('–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...');

    const client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5
    });

    await client.start({
        phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
        password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): '),
        phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
        onError: (err) => console.log(err),
    });

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    console.log('–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:', client.session.save());

    client.addEventHandler(async (event) => {
        const message = event.message;
        const sender = await message.getSender();

        if (sender && sender.username === BOT_USERNAME) {
            const text = message.message;
            console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ:\n${text}`);

            const terminalMatch = text.match(/^–¢–µ—Ä–º–∏–Ω–∞–ª\s+(.+)/m);
            const timeMatch = text.match(/–í\s+(\d{2}:\d{2}:\d{2})\s+–ø–æ—Å—Ç—É–ø–∏–ª–∞ –æ–ø–ª–∞—Ç–∞/i);
            const sumMatch = text.match(/–Ω–∞ —Å—É–º–º—É\s+([\d\s]+)—Ä—É–±\.\s+(\d{2})\s+–∫–æ–ø\./i);
            const idMatch = text.match(/–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏:\s+([^\n]+)/i);

            if (terminalMatch && timeMatch && sumMatch && idMatch) {
                const LMI_SHOP_ID = terminalMatch[1].trim();
                const LMI_SYS_PAYMENT_DATE = new Date().toISOString().split('T')[0] + ' ' + timeMatch[1];
                const LMI_PAYMENT_AMOUNT = `${sumMatch[1].replace(/\s/g, '')}.${sumMatch[2]}`;
                const LMI_CURRENCY = 'RUB';
                const LMI_SYS_PAYMENT_ID = idMatch[1].trim();

                const payload = {
                    LMI_PAYMENT_AMOUNT,
                    LMI_CURRENCY,
                    LMI_SYS_PAYMENT_DATE,
                    LMI_SYS_PAYMENT_ID,
                    LMI_SHOP_ID
                };

                try {
                    await axios.post(FORWARD_URL, payload, {
                        auth: {
                            username: FORWARD_USERNAME,
                            password: FORWARD_PASSWORD
                        },
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Å–ª–∞–Ω –Ω–∞ ludik.club', payload);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–∞ ludik.club:', error.response?.data || error.message);
                }
            } else {
                console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            }
        }
    }, new NewMessage({}));

    await client.runUntilDisconnected();
})();
